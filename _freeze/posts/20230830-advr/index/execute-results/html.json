{
  "hash": "a3b75a57a27bf1647dde43f09edc821b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advanced R\"\ndate: \"2023-08-30\"\ndate-modified: \"2023-09-14\"\nimage: \"cover.png\"\ncategories: \n  - R\n---\n\n\n\n\n::: {.callout-note title=\"Progress\"}\nLearning Progress: 40.8%.\n:::\n\n::: {.callout-tip title=\"Learning Source\"}\n-   <https://adv-r.hadley.nz/index.html>\n-   中文翻译由 ChatGPT 3.5 提供\n:::\n\n# Foundations {.unnumbered}\n\n# Functions\n\nR uses **lexical scoping**: it looks up the values of names based on how a function is defined, not how it is called. “Lexical” here is not the English adjective that means relating to words or a vocabulary. It’s a technical CS term that tells us that the scoping rules use a parse-time, rather than a run-time structure.\n\nR’s lexical scoping follows four primary rules:\n\n-   Name masking\n-   Functions versus variables\n-   A fresh start\n-   Dynamic lookup\n\n> R使用词法作用域（lexical scoping）：它根据函数的定义方式查找名称的值，而不是根据它的调用方式。“词法”在这里不是指与单词或词汇相关的英语形容词。它是一个技术性的计算机科学术语，告诉我们作用域规则使用的是解析时的结构，而不是运行时的结构。\n>\n> R的词法作用域遵循四条主要规则：\n>\n> -   名称屏蔽（Name masking）\n>\n> -   函数与变量\n>\n> -   全新的起点\n>\n> -   动态查找\n\nLexical scoping determines where, but not when to look for values. R looks for values when the function is run, not when the function is created. Together, these two properties tell us that the output of a function can differ depending on the objects outside the function’s environment.\n\n> 词法作用域决定了在哪里查找值，但并不决定何时查找值。R在运行函数时查找值，而不是在创建函数时。这两个属性共同告诉我们，函数的输出可能会因函数环境外部的对象而异。\n\nLazy evaluation is powered by a data structure called a promise, or (less commonly) a thunk. It’s one of the features that makes R such an interesting programming language.\n\n> 惰性求值是由一个叫做 promise 的数据结构支持的，或者更少见的叫做 thunk。它是使R成为一个如此有趣的编程语言的特性之一。\n\nYou cannot manipulate promises with R code. Promises are like a quantum state: any attempt to inspect them with R code will force an immediate evaluation, making the promise disappear. Later, you’ll learn about quosures, which convert promises into an R object where you can easily inspect the expression and the environment.\n\n> 您不能使用R代码操作 promises。Promise 就像一个量子状态：任何试图用R代码检查它们的尝试都会立即导致求值，使 promise 消失。稍后，您将了解到 quosures，它们可以将 promises 转换为R对象，您可以轻松检查表达式和环境。\n\nAn error indicates that something has gone wrong, and forces the user to deal with the problem. Some languages (like C, Go, and Rust) rely on special return values to indicate problems, but in R you should always throw an error.\n\n> 错误表示出现了问题，并迫使用户处理这个问题。一些语言（如C、Go和Rust）依赖于特殊的返回值来表示问题，但在R中，您应该始终抛出一个错误。\n\n# Environments\n\nThe job of an environment is to associate, or **bind**, a set of names to a set of values. You can think of an environment as a bag of names, with no implied order (i.e. it doesn’t make sense to ask which is the first element in an environment).\n\n> 环境的作用是将一组名称与一组值关联或绑定在一起。您可以将环境视为一个名称的集合，没有隐含的顺序（即在环境中询问哪个元素是第一个元素没有意义）。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(rlang)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ne1 <- env(\n  a = FALSE,\n  b = \"a\",\n  c = 2.3,\n  d = 1:3\n)\n\ne1\n#> <environment: 0x0000025d81de3928>\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nenv_print(e1)\n#> <environment: 0x0000025d81de3928>\n#> Parent: <environment: global>\n#> Bindings:\n#> • a: <lgl>\n#> • b: <chr>\n#> • c: <dbl>\n#> • d: <int>\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nenv_names(e1)\n#> [1] \"a\" \"b\" \"c\" \"d\"\n```\n:::\n\n\nTo compare environments, you need to use `identical()` and not `==`. This is because `==` is a vectorised operator, and environments are not vectors.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nidentical(global_env(), current_env())\n#> [1] TRUE\n\nglobal_env() == current_env()\n#> Error in global_env() == current_env(): comparison (==) is possible only for atomic and list types\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Parents\ne2a <- env(d = 4, e = 5)\ne2b <- env(e2a, a = 1, b = 2, c = 3)\n\ne2a\n#> <environment: 0x0000025d800ce000>\ne2b\n#> <environment: 0x0000025dff217980>\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# find the parent of an environment with env_parent()\nenv_parent(e2b)\n#> <environment: 0x0000025d800ce000>\nenv_parent(e2a)\n#> <environment: R_GlobalEnv>\n```\n:::\n\n\nOnly one environment doesn’t have a parent: the **empty** environment.\n\nThe immediate parent of the global environment is the last package you attached, the parent of that package is the second to last package you attached, …\n\n# Conditions\n\nEvery condition has default behaviour: errors stop execution and return to the top level, warnings are captured and displayed in aggregate, and messages are immediately displayed. Condition **handlers** allow us to temporarily override or supplement the default behaviour.\n\n> 每个条件都有默认行为：错误会停止执行并返回到顶层，警告会被捕获并按聚合方式显示，消息会立即显示。条件处理程序允许我们临时覆盖或补充默认行为。\n\n`tryCatch()` registers exiting handlers, and is typically used to handle error conditions. It allows you to override the default error behaviour. For example, the following code will return `NA` instead of throwing an error:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nf3 <- function(x) {\n  tryCatch(\n    error = function(cnd) NA,\n    log(x)\n  )\n}\n\nf3(3)\n#> [1] 1.098612\nf3(\"x\")\n#> [1] NA\n```\n:::\n\n\nThe handlers set up by `tryCatch()` are called **exiting** handlers because after the condition is signalled, control passes to the handler and never returns to the original code, effectively meaning that the code exits.\n\n> 由 `tryCatch()` 设置的处理程序被称为**退出处理程序**，因为在条件被发出后，控制权传递给处理程序，不再返回到原始代码，实际上意味着代码退出执行。\n\n::: callout-warning\n这章有点看不懂，暂缓。\n:::\n\n# Functional Progarmming {.unnumbered}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n:::\n\n\n# Functionals\n\nA **functional** is a function that takes a function as an input and returns a vector as output. Here's a simple functional: it calls the function provided as input with 1000 random uniform numbers.\n\n> 一个**函数式**是一个接受函数作为输入并返回向量作为输出的函数。这是一个简单的函数式示例：它使用 1000 个随机均匀数调用提供的输入函数。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrandomise <- function(f) f(runif(1e3))\nrandomise(mean)\n#> [1] 0.512291\nrandomise(mean)\n#> [1] 0.5115914\nrandomise(sum)\n#> [1] 501.9704\n```\n:::\n\n\nThe map functions also have shortcuts for extracting elements from a vector, powered by `purrr::pluck()`. You can use a character vector to select elements by name, an integer vector to select by position, or a list to select by both name and position. These are very useful for working with deeply nested lists, which often arise when working with JSON.\n\n> map 函数还具有从向量中提取元素的快捷方式，由 `purrr::pluck()` 提供支持。你可以使用字符向量按名称选择元素，使用整数向量按位置选择元素，或者使用列表同时按名称和位置选择元素。这在处理深层嵌套的列表时非常有用，这种情况在处理 JSON 数据时经常出现。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- list(\n  list(-1, x = 1, y = c(2), z = \"a\"),\n  list(-2, x = 4, y = c(5, 6), z = \"b\"),\n  list(-3, x = 8, y = c(9, 10, 11))\n)\n\n# Select by name\nmap_dbl(x, \"x\")\n#> [1] 1 4 8\n\n# Or by position\nmap_dbl(x, 1)\n#> [1] -1 -2 -3\n\n# Or both\nmap_dbl(x, list(\"y\", 1))\n#> [1] 2 5 9\n\n# You'll get an error if a component doesn't exist\nmap_chr(x, \"z\")\n#> Error in `map_chr()`:\n#> ℹ In index: 3.\n#> Caused by error:\n#> ! Result must be length 1, not 0.\n\n# Unless you supply a .default value\nmap_chr(x, \"z\", .default = NA)\n#> [1] \"a\" \"b\" NA\n```\n:::\n\n\nNote there’s a subtle difference between placing extra arguments inside an anonymous function compared with passing them to `map()`. Putting them in an anonymous function means that they will be evaluated every time `f()` is executed, not just once when you call `map()`. This is easiest to see if we make the additional argument random:\n\n> 需要注意的是，在匿名函数中放置额外的参数与将它们传递给 `map()` 之间存在微妙的差异。将它们放在匿名函数中意味着它们将在每次执行 `f()` 时被评估，而不仅仅是在调用 `map()` 时评估一次。如果我们将额外的参数设置为随机值，这一点将变得最容易理解：\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplus <- function(x, y) round(x + y, 2)\n\nx <- rep(0, 4)\nmap_dbl(x, plus, runif(1))\n#> [1] 0.68 0.68 0.68 0.68\nmap_dbl(x, ~ plus(.x, runif(1)))\n#> [1] 0.29 0.02 0.91 0.01\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Purrr style\nby_cyl <- split(mtcars, mtcars$cyl)\n\nby_cyl %>% \n  map(~ lm(mpg ~ wt, data = .x)) %>% \n  map(coef) %>% \n  map_dbl(2)\n#>         4         6         8 \n#> -5.647025 -2.780106 -2.192438\n```\n:::\n\n\nThere are three basic ways to loop over a vector with a for loop:\n\n-   Loop over the elements: `for (x in xs)`\n\n-   Loop over the numeric indices: `for (i in seq_along(xs))`\n\n-   Loop over the names: `for (nm in names(xs))`\n\nThe first form is analogous to the `map()` family. The second and third forms are equivalent to the `imap()` family which allows you to iterate over the values and the indices of a vector in parallel.\n\n`imap()` is like `map2()` in the sense that your `.f` gets called with two arguments, but here both are derived from the vector. `imap(x, f)` is equivalent to `map2(x, names(x), f)` if `x` has names, and `map2(x, seq_along(x), f)` if it does not.\n\n> 有三种基本方法可以使用for循环遍历向量：\n>\n> 遍历元素：`for (x in xs)`\n>\n> 遍历数值索引：`for (i in seq_along(xs))`\n>\n> 遍历名称：`for (nm in names(xs))`\n>\n> 第一种形式类似于 `map()` 家族。第二和第三种形式等同于 `imap()` 家族，它允许你同时迭代向量的值和索引。\n>\n> `imap()` 类似于 `map2()`，因为你的 `.f` 会被调用两次，但这里的两个参数都来自向量。如果 `x` 有名称，`imap(x, f)` 等同于 `map2(x, names(x), f)`，如果没有名称，就等同于 `map2(x, seq_along(x), f)`。\n\n`reduce()` is a useful way to generalise a function that works with two inputs (a binary function) to work with any number of inputs.\n\n`reduce()` 是一种有用的方式，可以将一个适用于两个输入（二进制函数）的函数泛化为适用于任意数量的输入。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1231)\nl <- map(1:4, ~ sample(1:10, 15, replace = TRUE))\nstr(l)\n#> List of 4\n#>  $ : int [1:15] 10 10 4 5 8 10 10 9 10 3 ...\n#>  $ : int [1:15] 4 9 5 4 1 5 8 9 9 10 ...\n#>  $ : int [1:15] 7 7 1 3 1 3 5 5 7 2 ...\n#>  $ : int [1:15] 7 9 4 8 7 10 4 5 6 10 ...\n\n# 查找出现在每个元素中的值\nreduce(l, intersect)\n#> [1] 10  4  5  9  7\n\n# 查找所有出现的值\nreduce(l, union)\n#>  [1] 10  4  5  8  9  3  6  7  1  2\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# accumulate 返回中间结果\naccumulate(l, intersect)\n#> [[1]]\n#>  [1] 10 10  4  5  8 10 10  9 10  3  3  4  6  7 10\n#> \n#> [[2]]\n#> [1] 10  4  5  8  9  6  7\n#> \n#> [[3]]\n#> [1] 10  4  5  9  7\n#> \n#> [[4]]\n#> [1] 10  4  5  9  7\n```\n:::\n\n\nIf you’re using `reduce()` in a function, you should always supply `.init`. Think carefully about what your function should return when you pass a vector of length 0 or 1, and make sure to test your implementation.\n\n> 如果你在函数中使用 `reduce()`，你应该始终提供 `.init` 参数。仔细考虑当你传递长度为 0 或 1 的向量时，你的函数应该返回什么，并确保测试你的实现。\n\nA **predicate functional** applies a predicate to each element of a vector. purrr provides seven useful functions which come in three groups:\n\n-   `some(.x, .p)` returns `TRUE` if *any* element matches;\n\n-   `every(.x, .p)` returns `TRUE` if *all* elements match;\n\n-   `none(.x, .p)` returns `TRUE` if *no* element matches.\n\nThese are similar to `any(map_lgl(.x, .p))`, `all(map_lgl(.x, .p))` and `all(map_lgl(.x, negate(.p)))` but they terminate early: `some()` returns `TRUE` when it sees the first `TRUE`, and `every()` and `none()` return `FALSE` when they see the first `FALSE` or `TRUE` respectively.\n\n-   `detect(.x, .p)` returns the value of the first match; `detect_index(.x, .p)` returns the location of the first match.\n\n-   `keep(.x, .p)` keeps all matching elements; `discard(.x, .p)` drops all matching elements.\n\n> **谓词函数**将谓词应用于向量的每个元素。purrr 提供了七个有用的函数，分为三组：\n>\n> -   `some(.x, .p)`：如果任何元素匹配，则返回 `TRUE`；\n>\n> -   `every(.x, .p)`：如果所有元素都匹配，则返回 `TRUE`；\n>\n> -   `none(.x, .p)`：如果没有元素匹配，则返回 `TRUE`。\n>\n> 这些函数类似于 `any(map_lgl(.x, .p))`、`all(map_lgl(.x, .p))` 和 `all(map_lgl(.x, negate(.p)))`，但它们会提前终止：`some()` 在看到第一个 `TRUE` 时返回 `TRUE`，`every()` 和 `none()` 在看到第一个 `FALSE` 或 `TRUE` 时分别返回 `FALSE`。\n>\n> -   `detect(.x, .p)`：返回第一个匹配的值；`detect_index(.x, .p)`：返回第一个匹配的位置。\n>\n> -   `keep(.x, .p)`：保留所有匹配的元素；`discard(.x, .p)`：删除所有匹配的元素。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf = data.frame(x = 1:3, y = letters[1:3])\ndetect(df, is.factor)\n#> NULL\ndetect_index(df, is.factor)\n#> [1] 0\n\nstr(keep(df, is.factor))\n#> 'data.frame':\t3 obs. of  0 variables\nstr(discard(df, is.factor))\n#> 'data.frame':\t3 obs. of  2 variables:\n#>  $ x: int  1 2 3\n#>  $ y: chr  \"a\" \"b\" \"c\"\n```\n:::\n\n\n`map()` and `modify()` come in variants that also take predicate functions, transforming only the elements of `.x` where `.p` is `TRUE`.\n\n> `map()` 和 `modify()` 有一些变体，它们还接受谓词函数，只会在 `.p` 为 `TRUE` 的情况下转换 `.x` 的元素。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf = data.frame(\n  num1 = c(0, 10, 20),\n  num2 = c(5, 6, 7),\n  chr1 = c(\"a\", \"b\", \"c\"),\n  stringsAsFactors = FALSE\n)\n\nstr(map_if(df, is.numeric, mean))\n#> List of 3\n#>  $ num1: num 10\n#>  $ num2: num 6\n#>  $ chr1: chr [1:3] \"a\" \"b\" \"c\"\nstr(modify_if(df, is.numeric, mean))\n#> 'data.frame':\t3 obs. of  3 variables:\n#>  $ num1: num  10 10 10\n#>  $ num2: num  6 6 6\n#>  $ chr1: chr  \"a\" \"b\" \"c\"\nstr(map(keep(df, is.numeric), mean))\n#> List of 2\n#>  $ num1: num 10\n#>  $ num2: num 6\n```\n:::\n\n\n# Function Factories\n\nA **function factory** is a function that makes functions. Here’s a very simple example: we use a function factory (`power1()`) to make two child functions (`square()` and `cube()`):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npower1 = function(exp) {\n  function(x) {\n    x ^ exp\n  }\n}\n\nsquare = power1(2)\ncube = power1(3)\n\nsquare(3)\n#> [1] 9\ncube(3)\n#> [1] 27\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(rlang)\nlibrary(ggplot2)\nlibrary(scales)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsquare\n#> function(x) {\n#>     x ^ exp\n#>   }\n#> <environment: 0x0000025dfed55000>\ncube\n#> function(x) {\n#>     x ^ exp\n#>   }\n#> <bytecode: 0x0000025dfd0dc978>\n#> <environment: 0x0000025dfe94cb28>\n```\n:::\n\n\nIt’s obvious where `x` comes from, but how does R find the value associated with `exp`? Simply printing the manufactured functions is not revealing because the bodies are identical; the contents of the enclosing environment are the important factors. We can get a little more insight by using `rlang::env_print()`. That shows us that we have two different environments (each of which was originally an execution environment of `power1()`). The environments have the same parent, which is the enclosing environment of `power1()`, the global environment.\n\n> 显然，`x` 的值是明显的，但 R 如何找到与 `exp` 相关联的值呢？仅仅打印制造出的函数并不能揭示这一点，因为它们的主体是相同的；封闭环境的内容才是重要因素。我们可以通过使用 `rlang::env_print()` 来获得更多的见解。这将显示我们有两个不同的环境（每个最初都是 `power1()` 的执行环境）。这些环境具有相同的父级，即 `power1()` 的封闭环境，也就是全局环境。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nenv_print(square)\n#> <environment: 0x0000025dfed55000>\n#> Parent: <environment: global>\n#> Bindings:\n#> • exp: <dbl>\nenv_print(cube)\n#> <environment: 0x0000025dfe94cb28>\n#> Parent: <environment: global>\n#> Bindings:\n#> • exp: <dbl>\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfn_env(square)$exp\n#> [1] 2\nfn_env(cube)$exp\n#> [1] 3\n```\n:::\n\n\n::: {.callout-tip title=\"To be continued\"}\n-   <https://adv-r.hadley.nz/function-factories.html#forcing-evaluation>\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}