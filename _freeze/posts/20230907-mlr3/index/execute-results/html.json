{
  "hash": "fd7e6b81359c5efc028f0faf35289427",
  "result": {
    "markdown": "---\ntitle: \"mlr3verse 技术手册\"\ndate: \"2023-09-07\"\ndate-modified: \"2023-09-08\"\nimage: \"cover.jpg\"\ncategories: \n  - Machine Learning\n  - R\n  - mlr3\n---\n\n\n::: {.callout-note title='Progress'}\nLearning Progress: 41.61%.\n:::\n\n::: {.callout-tip title=\"Learning Source\"}\n- 张敬信老师 QQ 群（222427909）文件\n- <https://github.com/zhjx19/RConf15/tree/main>\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(mlr3verse)\n```\n:::\n\n\n# 基础知识\n\n## 任务：封装数据\n\n任务是表格数据的封装，自变量为特征，因变量为目标或结果变量。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntsks() # 查看所有自带任务\n#> <DictionaryTask> with 21 stored values\n#> Keys: ames_housing, bike_sharing, boston_housing, breast_cancer,\n#>   german_credit, ilpd, iris, kc_housing, moneyball, mtcars, optdigits,\n#>   penguins, penguins_simple, pima, ruspini, sonar, spam, titanic,\n#>   usarrests, wine, zoo\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 创建任务\ndat = tsk(\"german_credit\")$data() # 提取数据\ntask = as_task_classif(dat, target = \"credit_risk\")\ntask\n#> <TaskClassif:dat> (1000 x 21)\n#> * Target: credit_risk\n#> * Properties: twoclass\n#> * Features (20):\n#>   - fct (14): credit_history, employment_duration, foreign_worker,\n#>     housing, job, other_debtors, other_installment_plans,\n#>     people_liable, personal_status_sex, property, purpose, savings,\n#>     status, telephone\n#>   - int (3): age, amount, duration\n#>   - ord (3): installment_rate, number_credits, present_residence\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 选择特征\ntask$select(cols = setdiff(task$feature_names, \"telephone\"))\ntask\n#> <TaskClassif:dat> (1000 x 20)\n#> * Target: credit_risk\n#> * Properties: twoclass\n#> * Features (19):\n#>   - fct (13): credit_history, employment_duration, foreign_worker,\n#>     housing, job, other_debtors, other_installment_plans,\n#>     people_liable, personal_status_sex, property, purpose, savings,\n#>     status\n#>   - int (3): age, amount, duration\n#>   - ord (3): installment_rate, number_credits, present_residence\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 划分训练集、测试集\nset.seed(1)\nsplit = partition(task, ratio = .7)\n```\n:::\n\n\n`stratify = TRUE` 默认按目标变量分层，得到训练集和测试集的索引（行号）。\n\n## 学习器：封装算法\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlrns()  # 查看所有自带学习器名字\n#> <DictionaryLearner> with 46 stored values\n#> Keys: classif.cv_glmnet, classif.debug, classif.featureless,\n#>   classif.glmnet, classif.kknn, classif.lda, classif.log_reg,\n#>   classif.multinom, classif.naive_bayes, classif.nnet, classif.qda,\n#>   classif.ranger, classif.rpart, classif.svm, classif.xgboost,\n#>   clust.agnes, clust.ap, clust.cmeans, clust.cobweb, clust.dbscan,\n#>   clust.diana, clust.em, clust.fanny, clust.featureless, clust.ff,\n#>   clust.hclust, clust.kkmeans, clust.kmeans, clust.MBatchKMeans,\n#>   clust.mclust, clust.meanshift, clust.pam, clust.SimpleKMeans,\n#>   clust.xmeans, regr.cv_glmnet, regr.debug, regr.featureless,\n#>   regr.glmnet, regr.kknn, regr.km, regr.lm, regr.nnet, regr.ranger,\n#>   regr.rpart, regr.svm, regr.xgboost\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 选择随机森林分类学习器\nlearner = lrn(\"classif.ranger\", num.trees = 100, predict_type = \"prob\")\nlearner\n#> <LearnerClassifRanger:classif.ranger>\n#> * Model: -\n#> * Parameters: num.threads=1, num.trees=100\n#> * Packages: mlr3, mlr3learners, ranger\n#> * Predict Types:  response, [prob]\n#> * Feature Types: logical, integer, numeric, character, factor, ordered\n#> * Properties: hotstart_backward, importance, multiclass, oob_error,\n#>   twoclass, weights\n```\n:::\n\n\n学习器 `$model` 属性为 `NULL`，用 `$train()` 方法在训练集上训练模型，模型结果存入 `$model`，再用 `predict()` 方法在测试集上做预测，得到结果是 `Prediction` 对象。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlearner$train(task, row_ids = split$train)\nlearner$model\n#> Ranger result\n#> \n#> Call:\n#>  ranger::ranger(dependent.variable.name = task$target_names, data = task$data(),      probability = self$predict_type == \"prob\", case.weights = task$weights$weight,      num.threads = 1L, num.trees = 100L) \n#> \n#> Type:                             Probability estimation \n#> Number of trees:                  100 \n#> Sample size:                      700 \n#> Number of independent variables:  19 \n#> Mtry:                             4 \n#> Target node size:                 10 \n#> Variable importance mode:         none \n#> Splitrule:                        gini \n#> OOB prediction error (Brier s.):  0.1615879\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprediction = learner$predict(task, row_ids = split$test)\nprediction\n```\n:::\n\n\n## 性能评估\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmsrs() # 查看所有支持的性能度量指标\n#> <DictionaryMeasure> with 66 stored values\n#> Keys: aic, bic, classif.acc, classif.auc, classif.bacc, classif.bbrier,\n#>   classif.ce, classif.costs, classif.dor, classif.fbeta, classif.fdr,\n#>   classif.fn, classif.fnr, classif.fomr, classif.fp, classif.fpr,\n#>   classif.logloss, classif.mauc_au1p, classif.mauc_au1u,\n#>   classif.mauc_aunp, classif.mauc_aunu, classif.mbrier, classif.mcc,\n#>   classif.npv, classif.ppv, classif.prauc, classif.precision,\n#>   classif.recall, classif.sensitivity, classif.specificity, classif.tn,\n#>   classif.tnr, classif.tp, classif.tpr, clust.ch, clust.dunn,\n#>   clust.silhouette, clust.wss, debug_classif, oob_error, regr.bias,\n#>   regr.ktau, regr.mae, regr.mape, regr.maxae, regr.medae, regr.medse,\n#>   regr.mse, regr.msle, regr.pbias, regr.rae, regr.rmse, regr.rmsle,\n#>   regr.rrse, regr.rse, regr.rsq, regr.sae, regr.smape, regr.srho,\n#>   regr.sse, selected_features, sim.jaccard, sim.phi, time_both,\n#>   time_predict, time_train\n```\n:::\n\n\n用预测对象的 `$score()` 方法，计算该度量指标的得分：\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprediction$score(msr(\"classif.acc\"))  # 准确率\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 绘制 ROC 曲线\nlibrary(precrec)\nautoplot(prediction, type = \"roc\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprediction$score(msr(\"classif.auc\"))  # auc 面积\n```\n:::\n\n\n## 重抽样\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrsmps()  # 查看所有支持的重抽样方法\n#> <DictionaryResampling> with 9 stored values\n#> Keys: bootstrap, custom, custom_cv, cv, holdout, insample, loo,\n#>   repeated_cv, subsampling\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncv10 = rsmp(\"cv\", folds = 10)  # 10 折交叉验证\n```\n:::\n\n\n### 实例化重抽样对象\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncv10$instantiate(task)  # 实例化\ncv10$iters  # 数据副本数\n#> [1] 10\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncv10$train_set(1)  # 第 1 个数据副本的训练集索引\ncv10$test_set(1)   # 第 1 个数据副本的测试集索引\n```\n:::\n\n\n### 使用重抽样\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrr =  resample(task, learner, cv10, store_models = TRUE)\n#> INFO  [15:19:14.625] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 1/10)\n#> INFO  [15:19:14.751] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 2/10)\n#> INFO  [15:19:14.843] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 3/10)\n#> INFO  [15:19:14.921] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 4/10)\n#> INFO  [15:19:14.999] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 5/10)\n#> INFO  [15:19:15.079] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 6/10)\n#> INFO  [15:19:15.163] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 7/10)\n#> INFO  [15:19:15.239] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 8/10)\n#> INFO  [15:19:15.313] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 9/10)\n#> INFO  [15:19:15.387] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 10/10)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrr$aggregate(msr(\"classif.acc\"))  # 所有重抽样的平均准确率\n#> classif.acc \n#>       0.753\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrr$score(msr(\"classif.acc\"))  # 各个重抽样的平均准确率\n#>     task_id     learner_id resampling_id iteration classif.acc\n#>  1:     dat classif.ranger            cv         1        0.77\n#>  2:     dat classif.ranger            cv         2        0.84\n#>  3:     dat classif.ranger            cv         3        0.70\n#>  4:     dat classif.ranger            cv         4        0.77\n#>  5:     dat classif.ranger            cv         5        0.76\n#>  6:     dat classif.ranger            cv         6        0.75\n#>  7:     dat classif.ranger            cv         7        0.71\n#>  8:     dat classif.ranger            cv         8        0.83\n#>  9:     dat classif.ranger            cv         9        0.66\n#> 10:     dat classif.ranger            cv        10        0.74\n#> Hidden columns: task, learner, resampling, prediction\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 查看第 1 个数据副本（第 1 折）上的结果\nrr$resampling$train_set(1)  # 第 1 折的训练集索引\nrr$learners[[1]]$model      # 第 1 折学习器的拟合模型\nrr$predictions()[[1]]       # 第 1 折的预测结果\n```\n:::\n\n\n## 基准测试\n\n基准测试（benchmark）用来比较不同学习器（算法）、在多个任务（数据）和/或不同重抽样策略（多个数据副本）上的平均性能表现。\n\n基准测试时有个关键问题：测试的公平性。即每个算法的每次测试必须在相同的重抽样训练集拟合模型，在相同的重抽样测试集评估性能。这些事情 `beachmark()` 会自动做好。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntasks = tsk(\"sonar\")  # 可以多任务\nlearners = lrns(c(\"classif.rpart\", \"classif.kknn\", \"classif.ranger\", \"classif.svm\"),\n                predict_type = \"prob\")\ndesign = benchmark_grid(tasks, learners, rsmps(\"cv\", folds = 5))\ndesign\n#>     task        learner resampling\n#> 1: sonar  classif.rpart         cv\n#> 2: sonar   classif.kknn         cv\n#> 3: sonar classif.ranger         cv\n#> 4: sonar    classif.svm         cv\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbmr = benchmark(design)  # 执行基准测试\nbmr$aggregate(list(msr(\"classif.acc\"), msr(\"classif.auc\")))  # 汇总基准测试结果\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 可视化：对比性能\nautoplot(bmr, type = \"roc\")  # ROC 曲线\nautoplot(bmr, measure = msr(\"classif.auc\"))  # AUC 箱线图\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=70%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-2.png){fig-align='center' width=70%}\n:::\n:::\n\n\n## 可视化\n\nmlr3viz 包定义了 `autoplot()` 函数来用 ggplot2 绘图。通常一个对象有不止一种类型的图，可以通过 `type` 参数来改变绘图。图形使用 viridis 的调色板，外观由 theme 参数控制，默认是 minimal 主题。\n\n### 可视化任务\n\n#### 分类任务\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask = tsk(\"penguins\")\ntask$select(c(\"body_mass\", \"bill_length\"))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(task, type = \"target\")  # \"target\" 图：条形图展示目标变量的各类别频数\nautoplot(task, type = \"duo\")     # \"duo\" 图：箱线图展示多个特征的分布\nautoplot(task, type = \"pairs\")   # \"pairs\" 图：展示多个特征的成对比较\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=70%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-2.png){fig-align='center' width=70%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-3.png){fig-align='center' width=70%}\n:::\n:::\n\n\n#### 回归任务\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask = tsk(\"mtcars\")\ntask$select(c(\"am\", \"carb\"))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(task, type = \"target\")  # \"target\" 图：箱线图展示目标变量的分布\nautoplot(task, type = \"pairs\")   # \"pairs\" 图：展示多个特征与目标变量的成对比较\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=70%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-2.png){fig-align='center' width=70%}\n:::\n:::\n\n\n### 可视化学习器\n\n#### glmnet 回归学习器\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntask = tsk(\"mtcars\")\nlearner = lrn(\"regr.glmnet\")\nlearner$train(task)\nautoplot(learner)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n#### 决策树学习器\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 分类树\ntask = tsk(\"penguins\")\nlearner = lrn(\"classif.rpart\", keep_model = TRUE)\nlearner$train(task)\nautoplot(learner)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 回归树\ntask = tsk(\"mtcars\")\nlearner = lrn(\"regr.rpart\", keep_model = TRUE)\nlearner$train(task)\nautoplot(learner)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n#### 层次聚类学习器\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 层次聚类树\ntask = tsk(\"usarrests\")\nlearner = lrn(\"clust.hclust\")\nlearner$train(task)\nautoplot(learner, type = \"dend\", task = task)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 碎石图\nautoplot(learner, type = \"scree\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n### 可视化预测对象\n\n#### 分类预测对象\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"stacked\" 图：堆叠条形图展示预测类别和真实类别频数对比\ntask = tsk(\"spam\")\nlearner = lrn(\"classif.rpart\", predict_type = \"prob\")\npred = learner$train(task)$predict(task)\nautoplot(pred, type = \"stacked\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# ROC 曲线：展示不同阈值下的真阳率与假阳率\nautoplot(pred, type = \"roc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# PR 曲线：展示不同阈值下的查准率与召回率\nautoplot(pred, type = \"prc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# “threshold” 图：展示二元分类在不同阈值下的性能\nautoplot(pred, type = \"threshold\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n#### 回归预测对象\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"xy\" 图：散点图展示回归预测的真实值与预测值\ntask = tsk(\"boston_housing\")\nlearner = lrn(\"regr.rpart\")\npred = learner$train(task)$predict(task)\nautoplot(pred, type = \"xy\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"residual\" 图：绘制响应的残差图\nautoplot(pred, type = \"residual\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"histogram\" 图：残差直方图展示残差的分布\nautoplot(pred, type = \"histogram\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n#### 聚类预测对象\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"scatter\" 图：绘制按聚类预测结果着色的散点图\ntask = tsk(\"usarrests\")\nlearner = lrn(\"clust.kmeans\", centers = 3)\npred = learner$train(task)$predict(task)\nautoplot(pred, task, type = \"scatter\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-41-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"sil\" 图：展示聚类的silhouette 宽度，虚线是平均silhouette 宽度\nautoplot(pred, task, type = \"sil\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"pca\" 图：展示数据的前两个主成分，不同聚类用颜色区分\nautoplot(pred, task, type = \"pca\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-43-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n### 可视化重抽样结果\n\n#### 分类重抽样结果\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"boxplot\"/\"histogram\" 图：箱线图展示性能度量的分布\ntask = tsk(\"sonar\")\nlearner = lrn(\"classif.rpart\", predict_type = \"prob\")\nresampling = rsmp(\"cv\")\nrr = resample(task, learner, resampling)\n#> INFO  [15:19:32.804] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 1/10)\n#> INFO  [15:19:32.840] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 2/10)\n#> INFO  [15:19:32.876] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 3/10)\n#> INFO  [15:19:32.911] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 4/10)\n#> INFO  [15:19:32.940] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 5/10)\n#> INFO  [15:19:32.979] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 6/10)\n#> INFO  [15:19:33.006] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 7/10)\n#> INFO  [15:19:33.031] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 8/10)\n#> INFO  [15:19:33.056] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 9/10)\n#> INFO  [15:19:33.081] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 10/10)\nautoplot(rr, type = \"boxplot\")\nautoplot(rr, type = \"histogram\")\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-1.png){fig-align='center' width=70%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-2.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# ROC 曲线：展示不同阈值下的真阳率与假阳率\nautoplot(rr, type = \"roc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-45-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# PR 曲线：展示不同阈值下的查准率与召回率\nautoplot(rr, type = \"prc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-46-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"prediction\" 图：展示两个特征表示的测试集样本点和以背景色区分的预测类别\ntask = tsk(\"pima\")\ntask$filter(seq(100))\ntask$select(c(\"age\", \"glucose\"))\nlearner = lrn(\"classif.rpart\")\nresampling = rsmp(\"cv\", folds = 3)\nrr = resample(task, learner, resampling, store_models = TRUE)\n#> INFO  [15:19:34.297] [mlr3] Applying learner 'classif.rpart' on task 'pima' (iter 1/3)\n#> INFO  [15:19:34.325] [mlr3] Applying learner 'classif.rpart' on task 'pima' (iter 2/3)\n#> INFO  [15:19:34.348] [mlr3] Applying learner 'classif.rpart' on task 'pima' (iter 3/3)\nautoplot(rr, type = \"prediction\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-47-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 若将学习器的预测类型改为\"prob\"，则用颜色深浅展示概率值\nlearner = lrn(\"classif.rpart\", predict_type = \"prob\")\nresampling = rsmp(\"cv\", folds = 3)\nrr = resample(task, learner, resampling, store_models = TRUE)\n#> INFO  [15:19:35.129] [mlr3] Applying learner 'classif.rpart' on task 'pima' (iter 1/3)\n#> INFO  [15:19:35.152] [mlr3] Applying learner 'classif.rpart' on task 'pima' (iter 2/3)\n#> INFO  [15:19:35.176] [mlr3] Applying learner 'classif.rpart' on task 'pima' (iter 3/3)\nautoplot(rr, type = \"prediction\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-48-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 上面是只绘制测试集，也可以加入训练集\nlearner = lrn(\"classif.rpart\", predict_type = \"prob\",\n              predict_sets = c(\"train\", \"test\"))\nresampling = rsmp(\"cv\", folds = 3)\nrr = resample(task, learner, resampling, store_models = TRUE)\n#> INFO  [15:19:36.075] [mlr3] Applying learner 'classif.rpart' on task 'pima' (iter 1/3)\n#> INFO  [15:19:36.110] [mlr3] Applying learner 'classif.rpart' on task 'pima' (iter 2/3)\n#> INFO  [15:19:36.147] [mlr3] Applying learner 'classif.rpart' on task 'pima' (iter 3/3)\nautoplot(rr, type = \"prediction\",\n         predict_sets = c(\"train\", \"test\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-49-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"prediction\" 图也可以绘制分类特征\ntask = tsk(\"german_credit\")\ntask$filter(seq(100))\ntask$select(c(\"housing\", \"employment_duration\"))\nlearner = lrn(\"classif.rpart\")\nresampling = rsmp(\"cv\", folds = 3)\nrr = resample(task, learner, resampling, store_models = TRUE)\n#> INFO  [15:19:37.084] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 1/3)\n#> INFO  [15:19:37.104] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 2/3)\n#> INFO  [15:19:37.125] [mlr3] Applying learner 'classif.rpart' on task 'german_credit' (iter 3/3)\nautoplot(rr, type = \"prediction\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-50-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n#### 回归重抽样结果\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"prediction\" 图：绘制一个特征与响应的散点图，散点表示测试集中的观测\ntask = tsk(\"boston_housing\")\ntask$select(\"age\")\ntask$filter(seq(100))\nlearner = lrn(\"regr.rpart\")\nresampling = rsmp(\"cv\", folds = 3)\nrr = resample(task, learner, resampling, store_models = TRUE)\n#> INFO  [15:19:37.797] [mlr3] Applying learner 'regr.rpart' on task 'boston_housing' (iter 1/3)\n#> INFO  [15:19:37.814] [mlr3] Applying learner 'regr.rpart' on task 'boston_housing' (iter 2/3)\n#> INFO  [15:19:37.830] [mlr3] Applying learner 'regr.rpart' on task 'boston_housing' (iter 3/3)\nautoplot(rr, type = \"prediction\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 若将学习器的预测类型改为\"se\"，还可以加上置信带\nlearner = lrn(\"regr.lm\", predict_type = \"se\")\nresampling = rsmp(\"cv\", folds = 3)\nrr = resample(task, learner, resampling, store_models = TRUE)\n#> INFO  [15:19:38.336] [mlr3] Applying learner 'regr.lm' on task 'boston_housing' (iter 1/3)\n#> INFO  [15:19:38.353] [mlr3] Applying learner 'regr.lm' on task 'boston_housing' (iter 2/3)\n#> INFO  [15:19:38.366] [mlr3] Applying learner 'regr.lm' on task 'boston_housing' (iter 3/3)\nautoplot(rr, type = \"prediction\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-52-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 上面是只绘制测试集，也可以加入训练集\ntask$select(\"age\")\nlearner = lrn(\"regr.lm\", predict_type = \"se\",\n              predict_sets = c(\"train\", \"test\"))\nresampling = rsmp(\"cv\", folds = 3)\nrr = resample(task, learner, resampling, store_models = TRUE)\n#> INFO  [15:19:38.928] [mlr3] Applying learner 'regr.lm' on task 'boston_housing' (iter 1/3)\n#> INFO  [15:19:38.946] [mlr3] Applying learner 'regr.lm' on task 'boston_housing' (iter 2/3)\n#> INFO  [15:19:38.966] [mlr3] Applying learner 'regr.lm' on task 'boston_housing' (iter 3/3)\nautoplot(rr, type = \"prediction\",\n         predict_sets = c(\"train\", \"test\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-53-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 还可以将预测面添加到背景\ntask = tsk(\"boston_housing\")\ntask$select(c(\"age\", \"rm\"))\ntask$filter(seq(100))\nlearner = lrn(\"regr.rpart\")\nresampling = rsmp(\"cv\", folds = 3)\nrr = resample(task, learner, resampling, store_models = TRUE)\n#> INFO  [15:19:39.559] [mlr3] Applying learner 'regr.rpart' on task 'boston_housing' (iter 1/3)\n#> INFO  [15:19:39.574] [mlr3] Applying learner 'regr.rpart' on task 'boston_housing' (iter 2/3)\n#> INFO  [15:19:39.589] [mlr3] Applying learner 'regr.rpart' on task 'boston_housing' (iter 3/3)\nautoplot(rr, type = \"prediction\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-54-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n### 可视化基准测试结果\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"boxplot\" 图：箱线图展示了多个任务的基准测试的性能分布\ntasks = tsks(c(\"pima\", \"sonar\"))\nlearners = lrns(c(\"classif.featureless\", \"classif.rpart\", \"classif.xgboost\"),\n                predict_type = \"prob\")\nresampling = rsmps(\"cv\")\nbmr = benchmark(benchmark_grid(tasks, learners, resampling))\nautoplot(bmr, type = \"boxplot\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-55-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 绘制一个任务与多个学习器的基准测试\ntask = tsk(\"pima\")\nlearners = lrns(c(\"classif.featureless\", \"classif.rpart\", \"classif.xgboost\"),\n                predict_type = \"prob\")\nresampling = rsmp(\"cv\")\nbmr = benchmark(benchmark_grid(task, learners, resampling))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(bmr, type = \"roc\")\nautoplot(bmr, type = \"prc\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-57-1.png){fig-align='center' width=70%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-57-2.png){fig-align='center' width=70%}\n:::\n:::\n\n\n### 可视化调参实例\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"performance\" 图：散点折线图展示随批次的模型性能变化\ninstance = tune(\n  tuner = tnr(\"gensa\"),\n  task = tsk(\"sonar\"),\n  learner = lts(lrn(\"classif.rpart\")),\n  resampling = rsmp(\"holdout\"),\n  measures = msr(\"classif.ce\"),\n  term_evals = 100\n)\nautoplot(instance, type = \"performance\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-58-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"parameter\" 图：散点图展示每个超参数取值与模型性能变化\nautoplot(instance, type = \"parameter\", cols_x = c(\"cp\", \"minsplit\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"marginal\" 图：展示不同超参数值的性能，颜色表示批次\nautoplot(instance, type = \"marginal\", cols_x = \"cp\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-60-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"parallel\" 图：可视化超参数之间的关系\nautoplot(instance, type = \"parallel\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-61-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"points\" 图：散点热力图展示两个超参数的性能对比，用颜色深浅表示模型性能\nautoplot(instance, type = \"points\", cols_x = c(\"cp\", \"minsplit\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-62-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"pairs\" 图：展示所有超参数成对对比\nautoplot(instance, type = \"pairs\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-63-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"surface\" 图：绘制两个超参数的模型性能面，该面是用一个学习器插值的\nautoplot(instance, type = \"surface\", cols_x = c(\"cp\", \"minsplit\"),\n         learner = lrn(\"regr.ranger\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-64-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n### 可视化特征过滤器\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 条形图展示基于过滤器的特征得分\ntask = tsk(\"mtcars\")\nft = flt(\"correlation\")\nft$calculate(task)\nautoplot(ft, n = 5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-65-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n更多细节在 mlr3viz 包的 reference 页。\n\n# 图学习器\n\n一个管道运算（PipeOp），表示机器学习管道中的一个计算步骤。一系列的 PipeOps  通过边连接（`%>>%`）构成图（Graph），图可以是简单的线性图，也可以是复杂的非线性图。\n\n搭建图学习器：\n\n- 用 `po()` 获取 PipeOp，通过连接符 `%>>%` 连接 Graphs 与 PipeOps\n\n- 通过 `gunion()` 将 Graphs 与 PipeOps 并起来\n\n- 用 `ppl(\"replicate\", graph, n)` 将 Graph 或 PipeOps 复制 n 份并起来\n\n- `Graph$plot()` 绘制图的结构关系\n\n- `as_learner(Graph)` 将图转化为学习器，即可跟普通学习器一样使用\n\n管道、图学习器的主要用处在于：\n\n- 特征工程：缺失值插补、特征提取、特征选择、处理不均衡数据……\n\n- 集成学习：袋装法、堆叠法\n\n- 分支训练、分块训练\n\n## 线形图\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 搭建图\ngraph = po(\"scale\") %>>%\n  po(\"encode\") %>>%\n  po(\"imputemedian\") %>>%\n  lrn(\"classif.rpart\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 可视化图\ngraph$plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-67-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 转为图学习器\ngl = as_learner(graph)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 训练任务\ntask = tsk(\"iris\")\ngl$train(task)\n```\n:::\n\n\n调试图：\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 取出或设置图学习器超参数\ngraph$pipeops$scale$param_set$values$center = FALSE\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 获取单独PipeOp 的$state（经过$train() 后）\ngraph$keep_results = TRUE\ngraph$train(task)\n#> $classif.rpart.output\n#> NULL\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngraph$pipeops$scale$state$scale\n#> Petal.Length  Petal.Width Sepal.Length  Sepal.Width \n#>     4.163367     1.424451     5.921098     3.098387\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 查看图的中间结果：$.result（需提前设置$keep_results = TRUE）\ngraph$pipeops$scale$.result[[1]]$head()\n#>    Species Petal.Length Petal.Width Sepal.Length Sepal.Width\n#> 1:  setosa    0.3362663    0.140405    0.8613268   1.1296201\n#> 2:  setosa    0.3362663    0.140405    0.8275493   0.9682458\n#> 3:  setosa    0.3122473    0.140405    0.7937718   1.0327956\n#> 4:  setosa    0.3602853    0.140405    0.7768830   1.0005207\n#> 5:  setosa    0.3362663    0.140405    0.8444380   1.1618950\n#> 6:  setosa    0.4083234    0.280810    0.9119931   1.2587196\n```\n:::\n\n\n## 非线性图\n\n### 分支\n\n集成学习的袋装法、堆叠法都是非线性图，另一种非线性图是分支：即只执行若干条备选路径中的一条。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngraph_branch = ppl(\"branch\", list(\n  pca = po(\"pca\"),\n  ica = po(\"ica\")\n)) %>>%\n  lrn(\"classif.kknn\")\ngraph_branch$plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-74-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n### 分块训练\n\n在数据太大，无法载入内存的情况下，一个常用的技术是将数据分成几块，然后分别对各块数据进行训练，之后再用 PipeOpClassifAvg 或 PipeOpRegrAvg 将模型按加权平均汇总。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngraph_chunks = po(\"chunk\", 4) %>>%\n  ppl(\"greplicate\", lrn(\"classif.rpart\"), 4) %>>%\n  po(\"classifavg\", 4)\ngraph_chunks$plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-75-1.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 转化为图学习器，与学习器一样使用\nchunks_lrn = as_learner(graph_chunks)\nchunks_lrn$train(tsk(\"iris\"))\n```\n:::\n\n\n## 集成学习\n\n集成学习，是通过构建多个基学习器，并按一定策略结合成强学习器来完成学习任务，即所谓“博采众长”，最终效果是优于任何一个原学习器。集成学习可用于分类/回归集成、特征选择集成、异常值检测集成等。\n\n这多个基学习器可以是同质的，比如都用决策树或都用神经网络，以 Bagging 和 Boosting 模式为代表；也可以是异质的，即采用不同的算法，以 Stacking 模式为代表。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.callout-tip title=\"To be continued\"}\n- 集成学习\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}