{
  "hash": "d154a6db9cd6fe4eab37dd1f95cb37f3",
  "result": {
    "markdown": "---\ntitle: \"mlr3verse 技术手册\"\ndate: \"2023-09-07\"\n# date-modified: \"2023-09-07\"\nimage: \"cover.jpg\"\ncategories: \n  - Machine Learning\n  - R\n  - mlr3\n---\n\n\n::: {.callout-note title='Progress'}\nLearning Progress: 13.14%.\n:::\n\n::: {.callout-tip title=\"Learning Source\"}\n- 张敬信老师 QQ 群（222427909）文件\n- <https://github.com/zhjx19/RConf15/tree/main>\n:::\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-1_43ca9d7921b31baa83035a8518727576'}\n\n```{.r .cell-code}\nlibrary(mlr3verse)\n```\n:::\n\n\n# 基础知识\n\n## 任务：封装数据\n\n任务是表格数据的封装，自变量为特征，因变量为目标或结果变量。\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-2_69349bd435a11dae9cfc9362394bb2cb'}\n\n```{.r .cell-code}\ntsks() # 查看所有自带任务\n#> <DictionaryTask> with 21 stored values\n#> Keys: ames_housing, bike_sharing, boston_housing, breast_cancer,\n#>   german_credit, ilpd, iris, kc_housing, moneyball, mtcars, optdigits,\n#>   penguins, penguins_simple, pima, ruspini, sonar, spam, titanic,\n#>   usarrests, wine, zoo\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-3_32212001b090dfdf0065ac3599b266af'}\n\n```{.r .cell-code}\n# 创建任务\ndat = tsk(\"german_credit\")$data() # 提取数据\ntask = as_task_classif(dat, target = \"credit_risk\")\ntask\n#> <TaskClassif:dat> (1000 x 21)\n#> * Target: credit_risk\n#> * Properties: twoclass\n#> * Features (20):\n#>   - fct (14): credit_history, employment_duration, foreign_worker,\n#>     housing, job, other_debtors, other_installment_plans,\n#>     people_liable, personal_status_sex, property, purpose, savings,\n#>     status, telephone\n#>   - int (3): age, amount, duration\n#>   - ord (3): installment_rate, number_credits, present_residence\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-4_b383d793f3beae54a54e668ddb0cff30'}\n\n```{.r .cell-code}\n# 选择特征\ntask$select(cols = setdiff(task$feature_names, \"telephone\"))\ntask\n#> <TaskClassif:dat> (1000 x 20)\n#> * Target: credit_risk\n#> * Properties: twoclass\n#> * Features (19):\n#>   - fct (13): credit_history, employment_duration, foreign_worker,\n#>     housing, job, other_debtors, other_installment_plans,\n#>     people_liable, personal_status_sex, property, purpose, savings,\n#>     status\n#>   - int (3): age, amount, duration\n#>   - ord (3): installment_rate, number_credits, present_residence\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-5_3c1e33d1ccedaa6665acb06e92b60fd5'}\n\n```{.r .cell-code}\n# 划分训练集、测试集\nset.seed(1)\nsplit = partition(task, ratio = .7)\n```\n:::\n\n\n`stratify = TRUE` 默认按目标变量分层，得到训练集和测试集的索引（行号）。\n\n## 学习器：封装算法\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-6_72047c2adca9811db45a15d1bf9b8e5b'}\n\n```{.r .cell-code}\nlrns()  # 查看所有自带学习器名字\n#> <DictionaryLearner> with 46 stored values\n#> Keys: classif.cv_glmnet, classif.debug, classif.featureless,\n#>   classif.glmnet, classif.kknn, classif.lda, classif.log_reg,\n#>   classif.multinom, classif.naive_bayes, classif.nnet, classif.qda,\n#>   classif.ranger, classif.rpart, classif.svm, classif.xgboost,\n#>   clust.agnes, clust.ap, clust.cmeans, clust.cobweb, clust.dbscan,\n#>   clust.diana, clust.em, clust.fanny, clust.featureless, clust.ff,\n#>   clust.hclust, clust.kkmeans, clust.kmeans, clust.MBatchKMeans,\n#>   clust.mclust, clust.meanshift, clust.pam, clust.SimpleKMeans,\n#>   clust.xmeans, regr.cv_glmnet, regr.debug, regr.featureless,\n#>   regr.glmnet, regr.kknn, regr.km, regr.lm, regr.nnet, regr.ranger,\n#>   regr.rpart, regr.svm, regr.xgboost\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-7_a59f887286534daad614d70198671658'}\n\n```{.r .cell-code}\n# 选择随机森林分类学习器\nlearner = lrn(\"classif.ranger\", num.trees = 100, predict_type = \"prob\")\nlearner\n#> <LearnerClassifRanger:classif.ranger>\n#> * Model: -\n#> * Parameters: num.threads=1, num.trees=100\n#> * Packages: mlr3, mlr3learners, ranger\n#> * Predict Types:  response, [prob]\n#> * Feature Types: logical, integer, numeric, character, factor, ordered\n#> * Properties: hotstart_backward, importance, multiclass, oob_error,\n#>   twoclass, weights\n```\n:::\n\n\n学习器 `$model` 属性为 `NULL`，用 `$train()` 方法在训练集上训练模型，模型结果存入 `$model`，再用 `predict()` 方法在测试集上做预测，得到结果是 `Prediction` 对象。\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-8_e673720e8b681a8a97fff7d21a06f9a3'}\n\n```{.r .cell-code}\nlearner$train(task, row_ids = split$train)\nlearner$model\n#> NULL\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-9_69dbc7a3c0d2a6c7e4c11aaa30aaeaee'}\n\n```{.r .cell-code}\nprediction = learner$predict(task, row_ids = split$test)\nprediction\n```\n:::\n\n\n## 性能评估\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-10_60921c1fb31662c5f6763bcc9f7d2f60'}\n\n```{.r .cell-code}\nmsrs() # 查看所有支持的性能度量指标\n#> <DictionaryMeasure> with 66 stored values\n#> Keys: aic, bic, classif.acc, classif.auc, classif.bacc, classif.bbrier,\n#>   classif.ce, classif.costs, classif.dor, classif.fbeta, classif.fdr,\n#>   classif.fn, classif.fnr, classif.fomr, classif.fp, classif.fpr,\n#>   classif.logloss, classif.mauc_au1p, classif.mauc_au1u,\n#>   classif.mauc_aunp, classif.mauc_aunu, classif.mbrier, classif.mcc,\n#>   classif.npv, classif.ppv, classif.prauc, classif.precision,\n#>   classif.recall, classif.sensitivity, classif.specificity, classif.tn,\n#>   classif.tnr, classif.tp, classif.tpr, clust.ch, clust.dunn,\n#>   clust.silhouette, clust.wss, debug_classif, oob_error, regr.bias,\n#>   regr.ktau, regr.mae, regr.mape, regr.maxae, regr.medae, regr.medse,\n#>   regr.mse, regr.msle, regr.pbias, regr.rae, regr.rmse, regr.rmsle,\n#>   regr.rrse, regr.rse, regr.rsq, regr.sae, regr.smape, regr.srho,\n#>   regr.sse, selected_features, sim.jaccard, sim.phi, time_both,\n#>   time_predict, time_train\n```\n:::\n\n\n用预测对象的 `$score()` 方法，计算该度量指标的得分：\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-11_3be23246ed522852a70b00cd07f2fe8c'}\n\n```{.r .cell-code}\nprediction$score(msr(\"classif.acc\"))  # 准确率\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-12_6b749747ec46cb1a88541b81ca2a7c38'}\n\n```{.r .cell-code}\n# 绘制 ROC 曲线\nlibrary(precrec)\nautoplot(prediction, type = \"roc\")\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-13_3c83e06134d6756278729964621543a0'}\n\n```{.r .cell-code}\nprediction$score(msr(\"classif.auc\"))  # auc 面积\n```\n:::\n\n\n## 重抽样\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-14_2517ad11adf3e287773c7e8824c09488'}\n\n```{.r .cell-code}\nrsmps()  # 查看所有支持的重抽样方法\n#> <DictionaryResampling> with 9 stored values\n#> Keys: bootstrap, custom, custom_cv, cv, holdout, insample, loo,\n#>   repeated_cv, subsampling\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-15_bc05fc8ad253ecd6cc5c98f0131cd1f7'}\n\n```{.r .cell-code}\ncv10 = rsmp(\"cv\", folds = 10)  # 10 折交叉验证\n```\n:::\n\n\n### 实例化重抽样对象\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-16_cfcb29204e6c6ef6be3506834502bb6e'}\n\n```{.r .cell-code}\ncv10$instantiate(task)  # 实例化\ncv10$iters  # 数据副本数\n#> [1] 10\ncv10$train_set(1)  # 第 1 个数据副本的训练集索引\n#>   [1]    5    8   21   24   31   37   49   51   60   70   71   81   82   88  118\n#>  [16]  141  146  152  154  159  162  179  184  188  191  206  246  259  275  276\n#>  [31]  277  295  301  314  367  380  396  405  412  428  438  447  463  471  474\n#>  [46]  501  505  535  536  557  559  564  584  597  606  607  614  621  623  627\n#>  [61]  635  642  643  650  666  676  685  686  687  699  706  712  721  725  743\n#>  [76]  752  760  765  770  773  774  782  810  821  824  826  852  873  874  887\n#>  [91]  888  890  912  921  933  935  938  951  957  962   13   18   57   59   97\n#> [106]  111  119  125  127  129  137  138  148  153  160  161  166  197  202  212\n#> [121]  215  217  240  247  268  288  297  299  316  320  326  328  339  347  352\n#> [136]  370  400  402  406  410  413  418  430  445  449  452  464  476  489  508\n#> [151]  534  537  545  554  565  574  585  593  594  595  601  604  624  661  671\n#> [166]  675  684  695  698  702  723  724  749  758  764  784  785  792  800  822\n#> [181]  823  827  833  848  850  857  861  869  880  929  930  944  945  971  975\n#> [196]  977  982  989  999 1000    3   27   45   48   50   61   80   91  101  105\n#> [211]  123  130  132  133  136  156  163  172  173  181  183  190  194  204  218\n#> [226]  245  248  258  263  266  281  293  294  298  305  306  308  309  330  340\n#> [241]  359  366  376  378  385  394  401  420  421  448  460  486  488  491  492\n#> [256]  496  503  504  512  523  562  575  580  586  591  599  602  617  630  631\n#> [271]  644  646  653  667  670  717  739  751  761  763  781  795  802  809  812\n#> [286]  817  842  844  845  854  889  898  914  916  917  923  928  970  974  998\n#> [301]   23   28   39   77   78   98  103  109  110  126  135  186  196  199  225\n#> [316]  237  251  261  271  280  282  284  289  291  296  307  318  341  343  362\n#> [331]  389  391  395  398  416  417  422  431  437  440  450  451  454  461  466\n#> [346]  469  493  515  524  526  531  532  540  543  544  551  567  570  582  590\n#> [361]  603  616  618  636  655  680  683  688  693  704  730  735  741  744  745\n#> [376]  756  767  799  806  832  835  839  853  882  883  885  900  904  913  931\n#> [391]  943  946  953  961  966  967  972  976  979  987    1    4   11   12   15\n#> [406]   32   43   52   58   64   69   87   92   94   96  104  106  112  120  134\n#> [421]  150  201  207  224  229  236  239  249  267  270  272  273  274  285  300\n#> [436]  302  312  322  327  333  338  364  365  371  375  377  382  387  407  423\n#> [451]  432  433  441  442  443  470  473  479  483  494  499  514  541  549  556\n#> [466]  571  578  598  619  625  647  659  681  690  691  709  710  720  731  737\n#> [481]  769  771  789  793  797  811  866  868  903  925  954  963  964  965  978\n#> [496]  986  991  993  994  995   25   35   40   55   63   75   84   90   93  100\n#> [511]  108  114  117  121  122  131  142  151  168  170  175  185  195  216  227\n#> [526]  230  256  264  269  287  304  317  324  331  353  361  372  374  379  384\n#> [541]  404  411  435  457  459  480  498  506  511  516  527  529  542  550  552\n#> [556]  555  569  573  579  581  588  596  611  626  628  629  632  633  652  657\n#> [571]  665  668  674  678  703  707  728  750  753  779  790  794  801  808  815\n#> [586]  829  830  837  841  847  859  865  870  876  881  908  919  927  942  949\n#> [601]    9   17   19   30   33   42   56   65   66   85   95   99  116  139  143\n#> [616]  144  145  157  174  180  220  226  233  242  254  265  278  283  286  313\n#> [631]  315  325  329  332  337  354  360  363  381  383  386  397  453  456  462\n#> [646]  475  478  482  490  533  538  547  548  577  587  600  609  610  613  615\n#> [661]  648  651  664  689  692  694  713  733  746  766  776  788  791  796  798\n#> [676]  813  816  819  820  828  831  834  851  858  864  871  884  891  892  896\n#> [691]  899  905  911  922  941  948  952  959  985  996   10   16   20   41   44\n#> [706]   54   62   79   83  115  171  177  182  189  198  200  213  221  223  231\n#> [721]  235  241  243  252  257  279  290  303  321  323  334  342  344  356  368\n#> [736]  373  392  408  409  425  427  446  458  465  487  500  502  507  510  513\n#> [751]  518  520  530  546  566  583  589  612  620  634  638  641  649  662  669\n#> [766]  679  697  705  711  719  722  726  732  738  740  768  783  787  804  814\n#> [781]  818  846  855  862  872  875  877  897  901  910  915  920  939  950  956\n#> [796]  960  973  981  988  997    6    7   29   36   67   68   72   73   89  102\n#> [811]  107  113  124  128  140  149  155  158  176  178  192  193  203  205  209\n#> [826]  210  214  219  234  244  255  262  310  311  319  336  348  349  358  388\n#> [841]  390  393  399  403  414  419  444  468  472  477  485  495  509  519  521\n#> [856]  525  539  558  560  592  622  640  645  654  663  696  700  701  734  755\n#> [871]  757  759  762  775  777  778  780  803  825  838  840  856  863  867  878\n#> [886]  886  894  895  906  909  926  936  947  955  968  969  980  984  990  992\ncv10$test_set(1)   # 第 1 个数据副本的测试集索引\n#>   [1]   2  14  22  26  34  38  46  47  53  74  76  86 147 164 165 167 169 187\n#>  [19] 208 211 222 228 232 238 250 253 260 292 335 345 346 350 351 355 357 369\n#>  [37] 415 424 426 429 434 436 439 455 467 481 484 497 517 522 528 553 561 563\n#>  [55] 568 572 576 605 608 637 639 656 658 660 672 673 677 682 708 714 715 716\n#>  [73] 718 727 729 736 742 747 748 754 772 786 805 807 836 843 849 860 879 893\n#>  [91] 902 907 918 924 932 934 937 940 958 983\n```\n:::\n\n\n### 使用重抽样\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-17_1315c7445c616e093196bd37a4f3b27e'}\n\n```{.r .cell-code}\nrr =  resample(task, learner, cv10, store_models = TRUE)\n#> INFO  [20:16:24.297] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 1/10)\n#> INFO  [20:16:24.844] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 2/10)\n#> INFO  [20:16:24.906] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 3/10)\n#> INFO  [20:16:24.965] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 4/10)\n#> INFO  [20:16:25.029] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 5/10)\n#> INFO  [20:16:25.087] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 6/10)\n#> INFO  [20:16:25.148] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 7/10)\n#> INFO  [20:16:25.205] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 8/10)\n#> INFO  [20:16:25.264] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 9/10)\n#> INFO  [20:16:25.321] [mlr3] Applying learner 'classif.ranger' on task 'dat' (iter 10/10)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-18_43bb799d56cd62e6d90cc7a30c55116c'}\n\n```{.r .cell-code}\nrr$aggregate(msr(\"classif.acc\"))  # 所有重抽样的平均准确率\n#> classif.acc \n#>       0.752\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-19_1418de57bf3bb56919e11998e7ac970f'}\n\n```{.r .cell-code}\nrr$score(msr(\"classif.acc\"))  # 各个重抽样的平均准确率\n#>     task_id     learner_id resampling_id iteration classif.acc\n#>  1:     dat classif.ranger            cv         1        0.82\n#>  2:     dat classif.ranger            cv         2        0.76\n#>  3:     dat classif.ranger            cv         3        0.69\n#>  4:     dat classif.ranger            cv         4        0.76\n#>  5:     dat classif.ranger            cv         5        0.77\n#>  6:     dat classif.ranger            cv         6        0.78\n#>  7:     dat classif.ranger            cv         7        0.73\n#>  8:     dat classif.ranger            cv         8        0.85\n#>  9:     dat classif.ranger            cv         9        0.65\n#> 10:     dat classif.ranger            cv        10        0.71\n#> Hidden columns: task, learner, resampling, prediction\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-20_864b400e707f5c727781025ed4e1d87c'}\n\n```{.r .cell-code}\n# 查看第 1 个数据副本（第 1 折）上的结果\nrr$resampling$train_set(1)  # 第 1 折的训练集索引\nrr$learners[[1]]$model      # 第 1 折学习器的拟合模型\nrr$predictions()[[1]]       # 第 1 折的预测结果\n```\n:::\n\n\n## 基准测试\n\n基准测试（benchmark）用来比较不同学习器（算法）、在多个任务（数据）和/或不同重抽样策略（多个数据副本）上的平均性能表现。\n\n基准测试时有个关键问题：测试的公平性。即每个算法的每次测试必须在相同的重抽样训练集拟合模型，在相同的重抽样测试集评估性能。这些事情 `beachmark()` 会自动做好。\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-21_4e595f00c9aefa7ebccaa22cd09f246c'}\n\n```{.r .cell-code}\ntasks = tsk(\"sonar\")  # 可以多任务\nlearners = lrns(c(\"classif.rpart\", \"classif.kknn\", \"classif.ranger\", \"classif.svm\"),\n                predict_type = \"prob\")\ndesign = benchmark_grid(tasks, learners, rsmps(\"cv\", folds = 5))\ndesign\n#>     task        learner resampling\n#> 1: sonar  classif.rpart         cv\n#> 2: sonar   classif.kknn         cv\n#> 3: sonar classif.ranger         cv\n#> 4: sonar    classif.svm         cv\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-22_fd0d1c98e0f1c1a0cfe02fe772541255'}\n\n```{.r .cell-code}\nbmr = benchmark(design)  # 执行基准测试\n#> INFO  [20:13:57.728] [mlr3] Running benchmark with 20 resampling iterations\n#> INFO  [20:13:57.733] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 1/5)\n#> INFO  [20:13:57.772] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 2/5)\n#> INFO  [20:13:57.797] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 3/5)\n#> INFO  [20:13:57.826] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 4/5)\n#> INFO  [20:13:57.857] [mlr3] Applying learner 'classif.rpart' on task 'sonar' (iter 5/5)\n#> INFO  [20:13:57.885] [mlr3] Applying learner 'classif.kknn' on task 'sonar' (iter 1/5)\n#> INFO  [20:13:57.950] [mlr3] Applying learner 'classif.kknn' on task 'sonar' (iter 2/5)\n#> INFO  [20:13:57.981] [mlr3] Applying learner 'classif.kknn' on task 'sonar' (iter 3/5)\n#> INFO  [20:13:58.019] [mlr3] Applying learner 'classif.kknn' on task 'sonar' (iter 4/5)\n#> INFO  [20:13:58.055] [mlr3] Applying learner 'classif.kknn' on task 'sonar' (iter 5/5)\n#> INFO  [20:13:58.092] [mlr3] Applying learner 'classif.ranger' on task 'sonar' (iter 1/5)\n#> INFO  [20:13:58.176] [mlr3] Applying learner 'classif.ranger' on task 'sonar' (iter 2/5)\n#> INFO  [20:13:58.255] [mlr3] Applying learner 'classif.ranger' on task 'sonar' (iter 3/5)\n#> INFO  [20:13:58.336] [mlr3] Applying learner 'classif.ranger' on task 'sonar' (iter 4/5)\n#> INFO  [20:13:58.430] [mlr3] Applying learner 'classif.ranger' on task 'sonar' (iter 5/5)\n#> INFO  [20:13:58.516] [mlr3] Applying learner 'classif.svm' on task 'sonar' (iter 1/5)\n#> INFO  [20:13:58.575] [mlr3] Applying learner 'classif.svm' on task 'sonar' (iter 2/5)\n#> INFO  [20:13:58.616] [mlr3] Applying learner 'classif.svm' on task 'sonar' (iter 3/5)\n#> INFO  [20:13:58.656] [mlr3] Applying learner 'classif.svm' on task 'sonar' (iter 4/5)\n#> INFO  [20:13:58.694] [mlr3] Applying learner 'classif.svm' on task 'sonar' (iter 5/5)\n#> INFO  [20:13:58.739] [mlr3] Finished benchmark\nbmr$aggregate(list(msr(\"classif.acc\"), msr(\"classif.auc\")))  # 汇总基准测试结果\n#>    nr task_id     learner_id resampling_id iters classif.acc classif.auc\n#> 1:  1   sonar  classif.rpart            cv     5   0.7017422   0.7431950\n#> 2:  2   sonar   classif.kknn            cv     5   0.8409988   0.9258035\n#> 3:  3   sonar classif.ranger            cv     5   0.8074332   0.9126291\n#> 4:  4   sonar    classif.svm            cv     5   0.8363531   0.9229183\n#> Hidden columns: resample_result\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-23_6f35c10d62bb7907352f5834e2fd3430'}\n\n```{.r .cell-code}\n# 可视化：对比性能\nautoplot(bmr, type = \"roc\")  # ROC 曲线\nautoplot(bmr, measure = msr(\"classif.auc\"))  # AUC 箱线图\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=70%}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-2.png){fig-align='center' width=70%}\n:::\n:::\n\n\n## 可视化\n\nmlr3viz 包定义了 `autoplot()` 函数来用 ggplot2 绘图。通常一个对象有不止一种类型的图，可以通过 `type` 参数来改变绘图。图形使用 viridis 的调色板，外观由 theme 参数控制，默认是 minimal 主题。\n\n### 可视化任务\n\n#### 分类任务\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-24_4abbe975edc034f6ce79ed26dd86e8fb'}\n\n```{.r .cell-code}\ntask = tsk(\"penguins\")\ntask$select(c(\"body_mass\", \"bill_length\"))\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.callout-tip title=\"To be continued\"}\n- 分类任务\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}