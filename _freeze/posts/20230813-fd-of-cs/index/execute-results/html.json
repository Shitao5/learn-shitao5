{
  "hash": "5e2f127d69995871b6f0ef3aa4fe87b4",
  "result": {
    "markdown": "---\ntitle: \"计算机科学导论\"\nsubtitle: \"原书第4版\"\ndate: \"2023-08-13\"\ndate-modified: \"2023-08-13\"\nimage: \"cover.jpg\"\ncategories: \n  - Computer Science\n---\n\n\n\n\n::: {.callout-note title='Progress'}\nLearning Progress: 8.21%.\n:::\n\n::: {.callout-tip title=\"Learning Source\"}\n- 贝赫鲁兹·佛罗赞. 计算机科学导论（原书第4版）[M]. 吕云翔, 杨洪洋, 曾洪立译. 机械工业出版社, 2020.\n:::\n\n# 绪论\n\n## 图灵模型\n\n- Alan Turing（阿兰·图灵）在 1936 年最先提出了一个通用计算设备的设想。他认为，所有的计算都可以在一种特殊的机器上执行，这就是现在所说的**图灵机**。\n\n- **通用图灵机**是对现代计算机的首次描述，只要提供了合适的程序，该机器就能做任何运算。可以证明，一台很强大的计算机和通用图灵机一样能进行同样的运算。\n\n## 冯·诺依曼模型\n\n- 1944 ~ 1945 年，冯·诺依曼指出，鉴于程序和数据在逻辑上是相同的，因此程序也能存储在计算机的存储器中。\n\n## 计算机组成部分\n\n- 冯·若依曼模型要求程序必须是有序的指令集。\n\n## 计算机科学作为一门学科\n\n- 如同其他任何学科一样，计算机科学现在被划分成几个领域。我们可以把这些领域归纳为两大类：**系统领域**和**应用领域**。\n系统领域涵盖那些与硬件和软件构成直接有关的领域，例如计算机体系结构、计算机网络、安全问题、操作系统、算法、程序设计语言以及软件工程。应用领域涵盖了与计算机使用有关的领域，例如数据库和人工智能。\n\n# 数字系统\n\n## 位置化数字系统\n\n在位置化数字系统中，数字中符号所占的位置决定了其表示的值。在该系统中，数字这样表示：\n\n$$\n\\pm(S_{K-1} \\cdots S_2 S_1 S_0. S_{-1} S{_-2} \\cdots S_{-L})_b\n$$\n\n它的值是：\n\n$$\nn = \\pm \\left( S_{K-1} \\times b^{K-1} + \\cdots + S_1 \\times b^1 + S_0 \\times b^0 + S_{-1} \\times b^{-1} + S_{-2} \\times b^{-2} + \\cdots + S_{-L} \\times b^{-L} \\right)\n$$\n\n其中，$S$ 是一套符号集，$b$ 是底（或基数），它等于 $S$ 符号集中的符号总数，其中 $S_K$ 和 $S_L$ 分别是代表整数和小数部分的符号。\n\n- 我们使用 $\\pm$ 符号表示一个数可正可负，但这些符号并不存储在计算机中——计算机用以处理该符号的方式不同。\n\n- 十进制不像二进制那样直接显示存储在计算机中的是什么。在二进制位数和十进制数码的数量之间没有显然的关系，它们之间的转换也不快捷。为了克服这个问题，发明了两种位置化系统：十六进制和八进制。\n\n- 可以用数码 $K$ 表示的最大值：\n  - 十进制整数的最大值为：$N_{\\text{max}} = 10^K - 1$\n  - 二进制整数的最大值为：$N_{\\text{max}} = 2^K - 1$\n  - 十六进制整数的最大值为：$N_{\\text{max}} = 16^K - 1$\n  - 八进制整数的最大值为：$N_{\\text{max}} = 8^K - 1$\n\n## 非位置化数字系统\n\n非位置化数字系统仍然使用有限的数字符号，每个符号都有一个值。但是符号所占用的位置通常与其值无关——每个符号的值都是固定的。为求出该数字的值，我们把所有符号表示的值相加。比如罗马数字系统。\n\n# 数据存储\n\n## 数据类型\n\n为了表示数据的不同类型，应该使用**位模式**，它是一个序列，有时也被称为**位流**。通常长度为 8 的位模式被称为 1 字节。有时用**字**这个术语指代更长的位模式。\n\n## 存储数字\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.callout-tip title=\"To be continued\"}\n- P38\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}