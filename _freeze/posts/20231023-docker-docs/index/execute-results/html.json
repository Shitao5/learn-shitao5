{
  "hash": "6d6ae04c9f18c5a228e023d89e6ea710",
  "result": {
    "markdown": "---\ntitle: \"Docker Docs\"\ndate: \"2023-10-23\"\ndate-modified: \"2023-10-25\"\nimage: \"cover.png\"\ncategories: \n  - Docker\n---\n\n\n\n\n::: {.callout-note title='Progress'}\nLearning Progress: Paused. Current progress 24.44%.⏱\n:::\n\n::: {.callout-tip title=\"Learning Source\"}\n- <https://docs.docker.com/get-started/overview/>\n- 中文翻译由 ChatGPT 3.5 提供\n:::\n\n<!-- 🚀🚀加油学 Docker！🚀🚀 -->\n\n# Docker overview\n\nDocker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker's methodologies for shipping, testing, and deploying code, you can significantly reduce the delay between writing code and running it in production.\n\n> Docker是一个用于开发、交付和运行应用程序的开放平台。Docker允许您将应用程序与基础架构分离，以便能够快速交付软件。使用Docker，您可以以与管理应用程序相同的方式来管理基础架构。通过利用Docker用于交付、测试和部署代码的方法，您可以显著缩短编写代码和在生产环境中运行代码之间的延迟。\n\nThe Docker daemon (`dockerd`) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. A daemon can also communicate with other daemons to manage Docker services.\n\nThe Docker client (`docker`) is the primary way that many Docker users interact with Docker. When you use commands such as `docker run`, the client sends these commands to `dockerd`, which carries them out. The `docker` command uses the Docker API. The Docker client can communicate with more than one daemon.\n\n> Docker 守护进程（`dockerd`）监听 Docker API 请求，并管理 Docker 对象，如镜像、容器、网络和卷。守护进程还可以与其他守护进程通信，以管理 Docker 服务。\n>\n> Docker 客户端（`docker`）是许多 Docker 用户与 Docker 交互的主要方式。当您使用诸如 `docker run` 的命令时，客户端将这些命令发送给 `dockerd`，由守护进程执行。`docker` 命令使用 Docker API。Docker 客户端可以与多个守护进程通信。\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.callout-tip title=\"To be continued\"}\n- [Containerize an application](https://docs.docker.com/get-started/02_our_app/)\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}