{
  "hash": "de7653d9d139a13d208c3408ba8e2d0c",
  "result": {
    "markdown": "---\ntitle: \"Building reproducible analytical pipelines with R\"\ndate: \"2024-02-03\"\n# date-modified: \"2024-02-02\"\nimage: \"cover.png\"\ncategories: \n  - R\n---\n\n\n\n\n::: {.callout-note title=\"Progress\"}\nLearning Progress: 17.65%.\n\n<!-- 读后感：[读《管理行为》](https://shitao5.org/posts/glxw/)。 -->\n:::\n\n::: {.callout-tip title=\"Learning Source\"}\n-   <https://raps-with-r.dev/>\n:::\n\n# Preface {.unnumbered}\n\n-   <p>There are many self-help books out there that state that it’s better to know a lot about only a few, maybe even only one, topic, than know a lot about many topics. I tend to disagree with this; at least in my experience, knowing enough about many different topics always allowed me to communicate effectively with many different people, from researchers focusing on very specific topics that needed my help to assist them in their research, to clients from a wide range of industries that were sharing their problems with me in my consulting years. If I needed to deepen my knowledge on a particular topic before I could intervene, I had the necessary theoretical background to grab a few books and learn the material. Also, I was never afraid of asking questions.</p>\n\n# Introduction\n\n-   Your projects are going to be reproducible simply because they were engineered, from the start, to be reproducible. There are two main ideas in this book that you need to keep in mind at all times:\n\n    -   DRY: Don’t Repeat Yourself;\n\n    -   WIT: Write IT down.\n\n    DRY WIT is not only the best type of humour, it is also the best way to write reproducible analytical pipelines.\n\n-   Interacting graphically with a program is simply not reproducible. So our aim is to write code that can be executed non-interactively by a machine. This is because one necessary condition for a workflow to be reproducible and get referred to as a RAP (**R**eproducible **A**nalytical **P**ipeline), is for the workflow to be able to be executed by a machine, automatically, without any human intervention.\n\n-   A reproducible project means that this project can be rerun by anyone at 0 (or very minimal) cost.\n\n-   Basically, for something to be truly reproducible, it has to respect the following bullet points:\n\n    -   Source code must obviously be available and thoroughly tested and documented (which is why we will be using Git and Github);\n\n    -   All the dependencies must be easy to find and install (we are going to deal with this using dependency management tools);\n\n    -   To be written with an open source programming language (nocode tools like Excel are by default non-reproducible because they can’t be used non-interactively, and which is why we are going to use the R programming language);\n\n    -   The project needs to be run on an open source operating system (thankfully, we can deal with this without having to install and learn to use a new operating system, thanks to Docker);\n\n    -   Data and the paper/report need obviously to be accessible as well, if not publicly as is the case for research, then within your company. This means that the concept of “scripts and/or data available upon request” belongs in the trash.\n\n-   The take-away message is that counting on the language itself being stable through time as a sufficient condition for reproducibility is not enough. We have to set up the code in a way that it actually is reproducible.\n\n# Don't Repeat Yourself {.unnumbered}\n\n# Before we start\n\n-   you need to know what an actual text file is. A document written in Word (with the `.docx` extension) is not a text file. It looks like text, but is not. The `.docx` format is a much more complex format with many layers of abstraction. “True” plain text files can be opened with the simplest text editor included in your operating system.\n\n-   The tools are always right. If you’re using a tool and it’s not behaving as expected, it is much more likely that your expectations are wrong. Take this opportunity to review your knowledge of the tool.\n\n# **Project start**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}